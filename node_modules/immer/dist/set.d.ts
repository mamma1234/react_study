import { DRAFT_STATE } from "./common";
import { AnySet, Drafted, ImmerState, ImmerBaseState, ProxyType } from "./types";
export interface SetState extends ImmerBaseState {
    type: ProxyType.Set;
    copy: AnySet | undefined;
    base: AnySet;
    drafts: Map<any, Drafted>;
    revoked: boolean;
    draft: Drafted<AnySet, SetState>;
}
declare const SetBase: SetConstructor;
export declare class DraftSet<K, V> extends SetBase implements Set<V> {
    [DRAFT_STATE]: SetState;
    constructor(target: AnySet, parent?: ImmerState);
    get size(): number;
    has(value: V): boolean;
    add(value: V): this;
    delete(value: V): boolean;
    clear(): void;
    values(): IterableIterator<V>;
    entries(): IterableIterator<[V, V]>;
    keys(): IterableIterator<V>;
    forEach(cb: (value: V, key: V, self: this) => void, thisArg?: any): void;
}
export declare function proxySet(target: AnySet, parent?: ImmerState): DraftSet<unknown, unknown>;
export {};
//# sourceMappingURL=set.d.ts.map