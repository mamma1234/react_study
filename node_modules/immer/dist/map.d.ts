import { DRAFT_STATE } from "./common";
import { AnyMap, Drafted, ImmerState, ImmerBaseState, ProxyType } from "./types";
export interface MapState extends ImmerBaseState {
    type: ProxyType.Map;
    copy: AnyMap | undefined;
    assigned: Map<any, boolean> | undefined;
    base: AnyMap;
    revoked: boolean;
    draft: Drafted<AnyMap, MapState>;
}
declare const MapBase: MapConstructor;
export declare class DraftMap<K, V> extends MapBase implements Map<K, V> {
    [DRAFT_STATE]: MapState;
    constructor(target: AnyMap, parent?: ImmerState);
    get size(): number;
    has(key: K): boolean;
    set(key: K, value: V): this;
    delete(key: K): boolean;
    clear(): void;
    forEach(cb: (value: V, key: K, self: this) => void, thisArg?: any): void;
    get(key: K): V;
    keys(): IterableIterator<K>;
    values(): IterableIterator<V>;
    entries(): IterableIterator<[K, V]>;
}
export declare function proxyMap(target: AnyMap, parent?: ImmerState): DraftMap<unknown, unknown>;
export {};
//# sourceMappingURL=map.d.ts.map