{"ast":null,"code":"import _toConsumableArray from \"C:\\\\github\\\\mamma1234\\\\react_study\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\github\\\\mamma1234\\\\react_study\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\github\\\\mamma1234\\\\react_study\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\github\\\\mamma1234\\\\react_study\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\github\\\\mamma1234\\\\react_study\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\github\\\\mamma1234\\\\react_study\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\github\\\\mamma1234\\\\react_study\\\\src\\\\LifeCycle3.js\";\nimport React, { Component } from 'react';\nimport './ScrollBox.css';\n\nvar LifeCycle3 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LifeCycle3, _Component);\n\n  function LifeCycle3() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LifeCycle3);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LifeCycle3)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.id = 2;\n    _this.state = {\n      array: [1]\n    };\n\n    _this.handleInsert = function () {\n      _this.setState({\n        array: [_this.id++].concat(_toConsumableArray(_this.state.array))\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LifeCycle3, [{\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps, prevState) {\n      // DOM 업데이트가 일어나기 직전의 시점입니다.\n      // 새 데이터가 상단에 추가되어도 스크롤바를 유지해보겠습니다.\n      // scrollHeight 는 전 후를 비교해서 스크롤 위치를 설정하기 위함이고,\n      // scrollTop 은, 이 기능이 크롬에 이미 구현이 되어있는데,\n      // 이미 구현이 되어있다면 처리하지 않도록 하기 위함입니다.\n      if (prevState.array !== this.state.array) {\n        var _this$list = this.list,\n            scrollTop = _this$list.scrollTop,\n            scrollHeight = _this$list.scrollHeight; // 여기서 반환 하는 값은 componentDidMount 에서 snapshot 값으로 받아올 수 있습니다.\n\n        return {\n          scrollTop: scrollTop,\n          scrollHeight: scrollHeight\n        };\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (snapshot) {\n        var scrollTop = this.list.scrollTop;\n        if (scrollTop !== snapshot.scrollTop) return; // 기능이 이미 구현되어있다면 처리하지 않습니다.\n\n        var diff = this.list.scrollHeight - snapshot.scrollHeight;\n        this.list.scrollTop += diff;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var rows = this.state.array.map(function (number) {\n        return React.createElement(\"div\", {\n          className: \"row\",\n          key: number,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, number);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        ref: function ref(_ref) {\n          _this2.list = _ref;\n        },\n        className: \"list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, rows), React.createElement(\"button\", {\n        onClick: this.handleInsert,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"getSnapshotBeforeUpdate\"));\n    }\n  }]);\n\n  return LifeCycle3;\n}(Component);\n\nexport default LifeCycle3;","map":{"version":3,"sources":["C:/github/mamma1234/react_study/src/LifeCycle3.js"],"names":["React","Component","LifeCycle3","id","state","array","handleInsert","setState","prevProps","prevState","list","scrollTop","scrollHeight","snapshot","diff","rows","map","number","ref"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,iBAAP;;IAEMC,U;;;;;;;;;;;;;;;;;UACJC,E,GAAK,C;UAELC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,CAAC,CAAD;AADD,K;;UAIRC,Y,GAAe,YAAM;AACnB,YAAKC,QAAL,CAAc;AACZF,QAAAA,KAAK,GAAG,MAAKF,EAAL,EAAH,4BAAiB,MAAKC,KAAL,CAAWC,KAA5B;AADO,OAAd;AAGD,K;;;;;;;4CAEuBG,S,EAAWC,S,EAAW;AAC5C;AACA;AACA;AACA;AACA;AACA,UAAIA,SAAS,CAACJ,KAAV,KAAoB,KAAKD,KAAL,CAAWC,KAAnC,EAA0C;AAAA,yBACJ,KAAKK,IADD;AAAA,YAChCC,SADgC,cAChCA,SADgC;AAAA,YACrBC,YADqB,cACrBA,YADqB,EAGxC;;AACA,eAAO;AACLD,UAAAA,SAAS,EAATA,SADK;AAELC,UAAAA,YAAY,EAAZA;AAFK,SAAP;AAID;AACF;;;uCAEkBJ,S,EAAWC,S,EAAWI,Q,EAAU;AACjD,UAAIA,QAAJ,EAAc;AAAA,YACJF,SADI,GACU,KAAKD,IADf,CACJC,SADI;AAEZ,YAAIA,SAAS,KAAKE,QAAQ,CAACF,SAA3B,EAAsC,OAF1B,CAEkC;;AAC9C,YAAMG,IAAI,GAAG,KAAKJ,IAAL,CAAUE,YAAV,GAAyBC,QAAQ,CAACD,YAA/C;AACA,aAAKF,IAAL,CAAUC,SAAV,IAAuBG,IAAvB;AACD;AACF;;;6BAEQ;AAAA;;AACP,UAAMC,IAAI,GAAG,KAAKX,KAAL,CAAWC,KAAX,CAAiBW,GAAjB,CAAqB,UAAAC,MAAM;AAAA,eACtC;AAAK,UAAA,SAAS,EAAC,KAAf;AAAqB,UAAA,GAAG,EAAEA,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGA,MADH,CADsC;AAAA,OAA3B,CAAb;AAMA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,GAAG,EAAE,aAAAC,IAAG,EAAI;AACV,UAAA,MAAI,CAACR,IAAL,GAAYQ,IAAZ;AACD,SAHH;AAIE,QAAA,SAAS,EAAC,MAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMGH,IANH,CADF,EASE;AAAQ,QAAA,OAAO,EAAE,KAAKT,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCATF,CADF;AAaD;;;;EA3DsBL,S;;AA6DzB,eAAeC,UAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './ScrollBox.css';\r\n\r\nclass LifeCycle3 extends Component {\r\n  id = 2;\r\n\r\n  state = {\r\n    array: [1]\r\n  };\r\n\r\n  handleInsert = () => {\r\n    this.setState({\r\n      array: [this.id++, ...this.state.array]\r\n    });\r\n  };\r\n\r\n  getSnapshotBeforeUpdate(prevProps, prevState) {\r\n    // DOM 업데이트가 일어나기 직전의 시점입니다.\r\n    // 새 데이터가 상단에 추가되어도 스크롤바를 유지해보겠습니다.\r\n    // scrollHeight 는 전 후를 비교해서 스크롤 위치를 설정하기 위함이고,\r\n    // scrollTop 은, 이 기능이 크롬에 이미 구현이 되어있는데,\r\n    // 이미 구현이 되어있다면 처리하지 않도록 하기 위함입니다.\r\n    if (prevState.array !== this.state.array) {\r\n      const { scrollTop, scrollHeight } = this.list;\r\n\r\n      // 여기서 반환 하는 값은 componentDidMount 에서 snapshot 값으로 받아올 수 있습니다.\r\n      return {\r\n        scrollTop,\r\n        scrollHeight\r\n      };\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (snapshot) {\r\n      const { scrollTop } = this.list;\r\n      if (scrollTop !== snapshot.scrollTop) return; // 기능이 이미 구현되어있다면 처리하지 않습니다.\r\n      const diff = this.list.scrollHeight - snapshot.scrollHeight;\r\n      this.list.scrollTop += diff;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const rows = this.state.array.map(number => (\r\n      <div className=\"row\" key={number}>\r\n        {number}\r\n      </div>\r\n    ));\r\n\r\n    return (\r\n      <div>\r\n        <div\r\n          ref={ref => {\r\n            this.list = ref;\r\n          }}\r\n          className=\"list\"\r\n        >\r\n          {rows}\r\n        </div>\r\n        <button onClick={this.handleInsert}>getSnapshotBeforeUpdate</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default LifeCycle3;\r\n"]},"metadata":{},"sourceType":"module"}